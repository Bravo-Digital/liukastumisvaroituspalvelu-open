

services:
  traefik:
    image: traefik:v3.5
    command:
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.le.acme.httpchallenge=true
      - --certificatesresolvers.le.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.le.acme.email=${LE_EMAIL}
      - --certificatesresolvers.le.acme.storage=/letsencrypt/acme.json
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_letsencrypt:/letsencrypt
    networks:
      - liukastumisvaroituspalvelu_net
    restart: unless-stopped

  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: app
    environment:
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}"
      GATEWAYAPI_API_KEY: "${GATEWAYAPI_API_KEY}"
      REPLY_SENDER: "${REPLY_SENDER}"
      WEBHOOK_SECRET: "${WEBHOOK_SECRET}"
      NODE_ENV: "production"
      ADMIN_USERNAME: "${ADMIN_USERNAME}"
      ADMIN_PASSWORD: "${ADMIN_PASSWORD}"
      ADMIN_SECRET: "${ADMIN_SECRET}"
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - liukastumisvaroituspalvelu_net
    labels:
      - traefik.enable=true
      - traefik.http.routers.app.rule=Host(`${APP_HOST}`)
      - traefik.http.routers.app.entrypoints=websecure
      - traefik.http.routers.app.tls.certresolver=le
      - traefik.http.services.app.loadbalancer.server.port=3000

  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: worker
    environment:
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}"
      GATEWAYAPI_API_KEY: "${GATEWAYAPI_API_KEY}"
      REPLY_SENDER: "${REPLY_SENDER}"
      WEBHOOK_SECRET: "${WEBHOOK_SECRET}"
      NODE_ENV: "production"
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - liukastumisvaroituspalvelu_net

  db:
    image: postgres:16
    environment:
      POSTGRES_DB: "${POSTGRES_DB}"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
    volumes:
      - liukastumisvaroituspalvelu_db_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - liukastumisvaroituspalvelu_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
  migrate:
    build:
      context: .
      dockerfile: Dockerfile
      target: migrator
    environment:
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - liukastumisvaroituspalvelu_net
    restart: "no"

  pgadmin:
    image: dpage/pgadmin4:8
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    depends_on:
      - db
    restart: unless-stopped
    networks:
      - liukastumisvaroituspalvelu_net
    ports: []

volumes:
  liukastumisvaroituspalvelu_db_data:
  traefik_letsencrypt:

networks:
  liukastumisvaroituspalvelu_net:
    driver: bridge
